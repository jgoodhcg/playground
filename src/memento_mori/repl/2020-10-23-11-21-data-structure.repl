shadow-cljs - config: /home/justin/projects/playground/shadow-cljs.edn
shadow-cljs - starting via "clojure"
=============================================================================
WARNING: The configured :dependencies in shadow-cljs.edn were ignored!
         When using :deps they must be configured in deps.edn
==============================================================================
Downloading: nrepl/nrepl/0.8.2/nrepl-0.8.2.pom from clojars
Downloading: cider/cider-nrepl/0.25.4/cider-nrepl-0.25.4.pom from clojars
Downloading: cider/cider-nrepl/0.25.4/cider-nrepl-0.25.4.jar from clojars
Downloading: nrepl/nrepl/0.8.2/nrepl-0.8.2.jar from clojars
NPM dependency "react" has installed version "^16.13.1"
"16.13.0" was required by jar:file:/home/justin/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/deps.cljs
NPM dependency "react-dom" has installed version "^16.13.1"
"16.13.0" was required by jar:file:/home/justin/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/deps.cljs
shadow-cljs - HTTP server available at http://localhost:3001
shadow-cljs - server version: 2.11.1 running at http://localhost:9630
shadow-cljs - nREPL server started on port 3333
;; Connected to nREPL server - nrepl://localhost:3333
;; CIDER 1.0.0snapshot, nREPL 0.8.2
;; Clojure 1.10.1, Java 13.0.2
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;;  Startup: /home/linuxbrew/.linuxbrew/bin/npx shadow-cljs -d nrepl:0.8.2 -d cider/piggieback:0.5.1 -d refactor-nrepl:2.5.0 -d cider/cider-nrepl:0.25.4 server
;;
;; ClojureScript REPL type: shadow
;; ClojureScript REPL init form: (do (require '[shadow.cljs.devtools.api :as shadow]) (shadow/watch :memento-mori) (shadow/nrepl-select :memento-mori))
;;
[:memento-mori] Configuring build.
[:memento-mori] Compiling ...
[:memento-mori] Build completed. (179 files, 0 compiled, 0 warnings, 3.46s)
To quit, type: :cljs/quit
;; => [:selected :memento-mori][:memento-mori] Compiling ...
[:memento-mori] Build completed. (179 files, 1 compiled, 0 warnings, 0.11s)
shadow.user> 
cljs.user> (ns memento-mori.index)
;; => nil
memento-mori.index> (def years 90)
(def weeks-per-year 52)
(def birthday (ld/parse "1991-09-16"))

;; => #'memento-mori.index/years;; => #'memento-mori.index/weeks-per-year;; => #'memento-mori.index/birthday
memento-mori.index> (-> years range)
;; output cleared

memento-mori.index> (-> years range (map (fn [year-n]
                                           {:year (-> birthday (ld/get-year) (+ year-n))})))
The result object failed to print. It is available via *1 if you want to interact with it.
The exception was:
Error: function (year_n){
return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"year","year",335913393),(cljc.java_time.local_date.get_year.call(null,memento_mori.index.birthday) + year_n)], null);
} is not ISeqable
;; => :shadow.cljs/print-error!
memento-mori.index> (->> years range (map (fn [year-n]
                                           {:year (-> birthday (ld/get-year) (+ year-n))})))
;; output cleared
[:memento-mori] Compiling ...
[:memento-mori] Build completed. (179 files, 1 compiled, 0 warnings, 0.08s)
------ REPL Error while processing ---------------------------------------------
(ns memento-mori.index
  (:require [reagent.core :as r]
            [reagent.dom :as rd]
            [cljc.java-time.local-date :as ld]
            [cljs.java-time.temporal.iso-fields :as iso-fields]))
The required namespace "cljs.java-time.temporal.iso-fields" is not available, it was required by "memento_mori/index.cljs".


memento-mori.index> (comment (->> years range (map (fn [year-n]
                        {:year (-> birthday (ld/get-year) (+ year-n))
                         :weeks (->> weeks-per-year range (map (fn [week-n]
                                                                 {:date-start })))}))))

;; output cleared
(+ 1 1)
;; => 2
memento-mori.index> (iso-fields/week-of-week-based-year)
;; => #object[TypeError TypeError: cljc.java_time.temporal.iso_fields.week_of_week_based_year is not a function]
memento-mori.index> (identity iso-fields/week-of-week-based-year)
;; => #object[WEEK_OF_WEEK_BASED_YEAR_FIELD WeekOfWeekBasedYear]
memento-mori.index> (-> (ld/of 2020 1 1) (.with iso-fields/week-of-week-based-year 1))
;; => #object[LocalDate 2020-01-01]
memento-mori.index> (-> (ld/of 2020 1 1) (.with iso-fields/week-of-week-based-year 3))
;; => #object[LocalDate 2020-01-15]------ REPL Error while processing ---------------------------------------------
(ns memento-mori.index
  (:require [reagent.core :as r]
            [reagent.dom :as rd]
            [cljc.java-time.local-date :as ld]
            [cljc.java-time.temporal.iso-fields :as iso-fields]
            [cljs.java-time.day-of-week :as day-of-week]))
The required namespace "cljs.java-time.day-of-week" is not available, it was required by "memento_mori/index.cljs".


memento-mori.index> 
memento-mori.index> 
memento-mori.index> 
memento-mori.index> 
 (-> (ld/of 2020 1 1)
     (.with iso-fields/week-of-week-based-year 3)
     (.with chrono-field/day-of-week day-of-week/sunday))
;; => #object[E DateTimeException: Invalid value for DayOfWeek (valid values 1 - 7): SUNDAY]
memento-mori.index> 
 (-> (ld/of 2020 1 1)
     (.with iso-fields/week-of-week-based-year 3)
     (.with chrono-field/day-of-week (.getValue day-of-week/sunday)))
;; => #object[TypeError TypeError: cljc.java_time.day_of_week.sunday.getValue is not a function]
memento-mori.index> 
 (-> (ld/of 2020 1 1)
     (.with iso-fields/week-of-week-based-year 3)
     (.with chrono-field/day-of-week (get-value day-of-week/sunday)))
------ WARNING - :undeclared-var -----------------------------------------------
 Resource: <eval>:3:39
 Use of undeclared Var memento-mori.index/get-value
--------------------------------------------------------------------------------

;; => nil
memento-mori.index> 
 (-> (ld/of 2020 1 1)
     (.with iso-fields/week-of-week-based-year 3)
     (.with chrono-field/day-of-week (day-of-week/get-value day-of-week/sunday)))
;; => #object[LocalDate 2020-01-19]
memento-mori.index> 
 (-> (ld/of 2020 1 1)
     (.with iso-fields/week-of-week-based-year 3)
     (.with chrono-field/day-of-week (day-of-week/get-value day-of-week/monday)))
;; => #object[LocalDate 2020-01-13]
memento-mori.index> 
 (-> (ld/of 2020 1 1)
     (.with iso-fields/week-of-week-based-year 1)
     (.with chrono-field/day-of-week (day-of-week/get-value day-of-week/monday)))
;; => #object[LocalDate 2019-12-30]
memento-mori.index> 
 (-> (ld/of 2020 1 1)
     (.with iso-fields/week-of-week-based-year 1)
     (.with chrono-field/day-of-week (day-of-week/get-value day-of-week/sunday)))
;; => #object[LocalDate 2020-01-05]
memento-mori.index> 
 (-> (ld/of 1991 9 16)
     (.with iso-fields/week-of-week-based-year (ld/ge))
     (.with chrono-field/day-of-week (day-of-week/get-value day-of-week/sunday)))
;; => #object[LocalDate 1991-01-06]
memento-mori.index> (-> (ld/of 1991 9 16)
                        (ld/plus-weeks 2))
;; => #object[LocalDate 1991-09-30]
memento-mori.index> (->> years range (map (fn [year-n]
                        {:year (-> birthday (ld/get-year) (+ year-n))
                         :weeks (->> weeks-per-year range (map (fn [week-n]
                                                                 {:date-start (-> birthday (ld/plus-weeks week-n))})))})))
;; output cleared

memento-mori.index> (comment "it works")

;; => nil[:memento-mori] Compiling ...
[:memento-mori] Build completed. (179 files, 1 compiled, 0 warnings, 0.07s)

memento-mori.index> (-> birthday (ld/plus-weeks 1) (ld/plus-days 6))
;; => #object[LocalDate 1991-09-29]
memento-mori.index> (->> years
      range
      (map (fn [year-n]
            {:year (-> birthday (ld/get-year) (+ year-n))
             :weeks (->> weeks-per-year
                         range
                         (map (fn [week-n]
                               {:date-start (-> birthday (ld/plus-weeks week-n))
                                :date-end   (-> birthday
                                                (ld/plus-weeks week-n)
                                                (ld/plus-days 6)
                                                )})))})))
;; output cleared

memento-mori.index> 
 (-> birthday (ld/plus-weeks 0) (ld/plus-days 6))
;; => #object[LocalDate 1991-09-22]
memento-mori.index> (def events [{:date-start (ld/of 1991 9 30)
                                  :name "event 1"
                                  :color "#ff00ff"}
                                 {:date-start (ld/of 1991 10 31)
                                  :date-end (ld/of 1991 10 23)
                                  :name "event 2"
                                  :color "#fff000"}])
;; => #'memento-mori.index/events
memento-mori.index> 
 (->> years
      range
      (map (fn [year-n]
            {:year (-> birthday (ld/get-year) (+ year-n))
             :weeks (->> weeks-per-year
                         range
                         (map (fn [week-n]
                                (let [week-start (-> birthday (ld/plus-weeks week-n))
                                      week-end   (-> birthday
                                                  (ld/plus-weeks week-n)
                                                  (ld/plus-days 6)
                                                  )])
                               {:date-start
                                :date-end   })))})))
;; output cleared

memento-mori.index> 
 (->> years
      range
      (map (fn [year-n]
            {:year (-> birthday (ld/get-year) (+ year-n))
             :weeks (->> weeks-per-year
                         range
                         (map (fn [week-n]
                                (let [week-start (-> birthday (ld/plus-weeks week-n))
                                      week-end   (-> birthday
                                                     (ld/plus-weeks week-n)
                                                     (ld/plus-days 6)
                                                     )]
                                  {:week-start
                                   :week-end   }))))})))
